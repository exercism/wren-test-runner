#!/usr/bin/env bash

# Synopsis:
# Run the test runner on a solution.

# Arguments:
# $1: exercise slug
# $2: absolute path to solution folder
# $3: absolute path to output directory

# Output:
# Writes the test results to a results.json file in the passed-in output directory.
# The test results are formatted according to the specifications at https://github.com/exercism/docs/blob/main/building/tooling/test-runners/interface.md

# Example:
# ./bin/run.sh two-fer /absolute/path/to/two-fer/solution/folder/ /absolute/path/to/output/directory/

# If any required arguments is missing, print the usage and exit
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "usage: ./bin/run.sh exercise-slug /absolute/path/to/two-fer/solution/folder/ /absolute/path/to/output/directory/"
    exit 1
fi

slug="$1"
input_dir="${2%/}"
output_dir="${3%/}"
results_file="${output_dir}/results.json"

# Create the output directory if it doesn't exist
mkdir -p "${output_dir}"

echo "${slug}: testing..."


TESTFILE=$(jq -r .files.test[0] ${input_dir}/.meta/config.json)
TEST="${TESTFILE}"
ln -sf $(realpath ./vendor) ${input_dir}/vendor
rm -f $results_file

# rsync -r wren_modules/ ${input_dir}/wren_modules/
ln -sf $(realpath wren_modules) ${input_dir}/wren_modules
cd ${input_dir}

# rewrite to use the wrapper
sed -i'' -e 's{"wren-testie/testie"{"wren-testie-wrapper/testie"{' $TEST

# rewrite any skipped tests to not be skipped
sed -i'' -e 's/skip.test/do.test/' $TEST

# Run the tests for the provided implementation file and redirect stdout and
# stderr to capture it
test_output=$(wrenc $TEST $results_file 2>&1)

status=$?

# cleanup
rm ${input_dir}/vendor
# echo "$test_output"

# if we have a results file that was generated by the test runner
# then use that, augment with stack trace if necessary
if [ -f $results_file ]; then
    jq -r '.' $results_file | sponge $results_file

    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo '{version: 2, status:"error", message: "Internal Exercism failure: Invalid JSON payload."}' > ${results_file}
    fi

    # index=$(cat $results_file | jq -M '[.tests[].status] | index("fail")')
    # if [ "$index" != "null" ]; then
    #     trace=$(echo "$test_output" | sed -e '1,/STACKTRACE/ d' | sed "s%${input_dir}%.%")
    #     jq ".tests[$index].message |= \"$trace\"" $results_file | sponge $results_file
    # fi
# otherwise something very bad happened so we return status:error
else
    # OPTIONAL: Sanitize the output
    # In some cases, the test output might be overly verbose, in which case stripping
    # the unneeded information can be very helpful to the student
    sanitized_test_output=$(echo "${test_output}" | sed "s%${input_dir}%.%" )

    # OPTIONAL: Manually add colors to the output to help scanning the output for errors
    # If the test output does not contain colors to help identify failing (or passing)
    # tests, it can be helpful to manually add colors to the output
    # colorized_test_output=$(echo "${test_output}" \
    #      | GREP_COLOR='01;31' grep --color=always -E -e '^(ERROR:.*|.*failed)$|$' \
    #      | GREP_COLOR='01;32' grep --color=always -E -e '^.*passed$|$')

    jq -n --arg output "${sanitized_test_output}" '{version: 2, status: "error", message: $output}' > ${results_file}
fi

echo "${slug}: done"
